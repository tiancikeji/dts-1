<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- config -->
	<beans:bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="locations">
			<beans:list>
				<beans:value>classpath:dts.properties</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="placeholderPrefix">
			<beans:value>#[</beans:value>
		</beans:property>
		<beans:property name="placeholderSuffix">
			<beans:value>]</beans:value>
		</beans:property>
	</beans:bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/assets/**" location="/assets/" />
	<resources mapping="/assets/upload/**" location="/assets/upload/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="tianci.pinao.dts" />

	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url">
			<beans:value>#[jdbc.url]</beans:value>
		</beans:property>
		<beans:property name="username">
			<beans:value>#[jdbc.username]</beans:value>
		</beans:property>
		<beans:property name="password">
			<beans:value>#[jdbc.password]</beans:value>
		</beans:property>

	</beans:bean>

	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource">
			<beans:ref bean="dataSource" />
		</beans:property>
	</beans:bean>
	    <!-- 开启SpringMVC上传下载功能 -->
  <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	    
    <!-- log & back up -->
    <beans:bean id="temDao" class="tianci.pinao.dts.tasks.dao.impl.TemDaoImpl">
		<beans:property name="jdbcTemplate" ref="jdbcTemplate" />
    </beans:bean>
    <beans:bean id="temTaskService" class="tianci.pinao.dts.tasks.service.impl.TemTaskServiceImpl">
		<beans:property name="temDao" ref="temDao" />
		
		<beans:property name="saveStock">
			<beans:value>#[tem.stock]</beans:value>
		</beans:property>
		<beans:property name="saveReferTem">
			<beans:value>#[tem.referTem]</beans:value>
		</beans:property>
		<beans:property name="channelsService" ref="channelsService" />
    </beans:bean>
    
    <beans:bean id="logTemTask" class ="tianci.pinao.dts.tasks.LogTemTask">
		<beans:property name="temTaskService" ref="temTaskService" />
    </beans:bean>
    <beans:bean id="readTemTask" class ="tianci.pinao.dts.tasks.ReadTemTask">
		<beans:property name="temTaskService" ref="temTaskService" />
    </beans:bean>
    <beans:bean id="saveTemTask" class ="tianci.pinao.dts.tasks.SaveTemTask">
		<beans:property name="temTaskService" ref="temTaskService" />
    </beans:bean>
		
	<beans:bean id="saveTemTaskJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<beans:property name="targetObject" ref="saveTemTask" />
		<beans:property name="targetMethod" value="run" />
	</beans:bean>
	<beans:bean id="readTemTaskJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<beans:property name="targetObject" ref="readTemTask" />
		<beans:property name="targetMethod" value="run" />
	</beans:bean>
	<beans:bean id="logTemTaskJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<beans:property name="targetObject" ref="logTemTask" />
		<beans:property name="targetMethod" value="run" />
	</beans:bean>
	
	<beans:bean id="saveTemTaskTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<beans:property name="jobDetail" ref="saveTemTaskJob" />
	    <beans:property name="startDelay" value="1000" />
	    <beans:property name="repeatInterval" value="100" />
	    <beans:property name="repeatCount" value="-1" />
	</beans:bean>
	<beans:bean id="readTemTaskTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<beans:property name="jobDetail" ref="readTemTaskJob" />
	    <beans:property name="startDelay" value="1000" />
	    <beans:property name="repeatInterval" value="100" />
	    <beans:property name="repeatCount" value="-1" />
	</beans:bean>
	<beans:bean id="logTemTaskTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<beans:property name="jobDetail" ref="logTemTaskJob" />
	    <beans:property name="startDelay" value="1000" />
	    <beans:property name="repeatInterval" value="100" />
	    <beans:property name="repeatCount" value="-1" />
	</beans:bean>
	
	<beans:bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<beans:property name="taskExecutor">
			<beans:bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
				<beans:property name="corePoolSize" value="40" />
				<beans:property name="maxPoolSize" value="500" />
				<beans:property name="queueCapacity" value="10" />
				<beans:property name="waitForTasksToCompleteOnShutdown" value="false" />
			</beans:bean>
		</beans:property>
		<beans:property name="triggers">
			<beans:list>
                <!--<beans:ref bean="logTemTaskTrigger" />
                beans:ref bean="saveTemTaskTrigger" />
                <beans:ref bean="readTemTaskTrigger" /-->
			</beans:list>
		</beans:property>
	</beans:bean>
</beans:beans>
